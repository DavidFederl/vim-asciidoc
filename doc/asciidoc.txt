*asciidoc.txt*  Vim :heart: Asciidoc

Author:  David P. Federl <https://github.com/DavidFederl>
URL:     https://github.com/DavidFederl/vim-asciidoc
License: MIT


INTRODUCTION                                                     *asciidoc*


Vim has syntax highlighting for asciidoc out of the box. And it is/was really
slow for me, probably because it tries to be very smart about syntax.

This plugin:

    - has different syntax highlighting;
    - is way faster (your vim lags less :) );
    - has folding;
    - has commands to compile documents (html, pdf, docx).


SETTINGS                                                *asciidoc-settings*

It should work out of the box (at least it was the intention). But sometimes
one needs settings to set.


*g:asciidoc_executable*            What to use for HTML.
                                    Default: asciidoc
  Example: >

  let g:asciidoc_executable = '~/projects/asciidoc/bin/asciidoc'


*g:asciidoc_extensions*            What extensions to use with HTML.
                                    Default: []
  Example: >

  let g:asciidoc_extensions = ['asciidoc-diagram', 'asciidoc-rouge']


*g:asciidoc_css_path*              Path to custom CSS to use with HTML.
                                    Default: ''
  Example: >

  let g:asciidoc_css_path = '~/docs/ascidoctor-themes/'


*g:asciidoc_css*                   Custom CSS file name to use with HTML.
                                    Default: ''
  Example: >

  let g:asciidoc_css = 'mytheme.css'


*g:asciidoc_pdf_executable*        What to use for PDF.
                                    Default: asciidoc-pdf
  Example: >

  let g:asciidoc_pdf_executable = '~/asciidoc-pdf/bin/asciidoc-pdf'


*g:asciidoc_use_fullpath*          Use full path when pass a file for a
                                    compilation.
                                    Default: v:true
  Example: >

  let g:asciidoc_use_fullpath = v:false

Might be useful if for some reason file passed for a compilation should not
have full path. For example asciidoc-pdf in docker might use the following
setup to be able to create PDFs: >

  let g:asciidoc_pdf_executable = 'docker run --rm -v $(pwd):/documents/ asciidoc/docker-asciidoc asciidoc-pdf'

Note that you might need to have proper current working directory.
Available for |:Asciidoc2HTML| and |:Asciidoc2PDF| commands only.


*g:asciidoc_pdf_extensions*        What extensions to use with PDF.
                                    Default: []
  Example: >

  let g:asciidoc_pdf_extensions = ['asciidoc-diagram']


*g:asciidoc_pdf_themes_path*       Path to custom themes.
                                    Default: ''
  Example: >

  let g:asciidoc_pdf_themes_path = '~/docs/ascidoctor-themes/'


*g:asciidoc_pdf_fonts_path*        Path to fonts used in themes.
                                    Default: ''
  Example: >

  let g:asciidoc_pdf_fonts_path = '~/docs/fonts/'


*g:asciidoc_pandoc_executable*     What to use for DOCX. The process is to
                                    convert ADOC to DOCBOOK with
                                    |g:asciidoc_executable| and then
                                    DOCBOOK to DOCX with pandoc.
                                    Default: 'pandoc'
  Example: >

  let g:asciidoc_pandoc_executable = '~/bin/pandoc'


*g:asciidoc_pandoc_data_dir*       Set --data-dir for pandoc.
                                    Default: ''
  Example: >

  let g:asciidoc_pandoc_data_dir = '~/docs/.pandoc'


*g:asciidoc_pandoc_reference_doc*  Set --reference-doc for pandoc.
                                    What docx file to use as a reference
                                    document (use styles defined there)
                                    Default: ''
  Example: >

  let g:asciidoc_pandoc_referenc_doc = 'custom-reference.docx'


*g:asciidoc_pandoc_other_params*   Set additional parameteres for pandoc.
                                    Default: ''
  Example: >

  let g:asciidoc_pandoc_other_params = '--toc'


*g:asciidoc_folding*               Fold sections (headers).
                                    Default: 0
  Example: >

  let g:asciidoc_folding = 1

if enabled all sections would be foldable. Title has the same fold level as
sections level 1, higher level sections would have higher fold level (folded
under section level-1): >

 = Title
 == Section 1
 === Section 2
 === Section 2
 == Section 1

When folded: >

 = Title -----------------------------------
 == Section 1 ------------------------------
 == Section 1 ------------------------------


*g:asciidoc_foldnested*            Fold nested sections.
                                    Default: 1
  Example: >

  let g:asciidoc_foldnested = 0

if disabled all sections would have the same foldlevel (=1) no matter what
section level is.

Then >

 = Title
 hello world
 == Section 1
 hello world
 === Section 2
 hello world
 === Section 2
 hello world
 == Section 1
 hello world

Would be folded to: >

 = Title -----------------------------------
 == Section 1 ------------------------------
 === Section 2 -----------------------------
 === Section 2 -----------------------------
 == Section 1 ------------------------------


*g:asciidoc_foldtitle_as_h1*       Fold title as level 1 sections.
                                    Default: 1

  Example: >

  let g:asciidoc_foldtitle_as_h1 = 0

When on, following >

 = Title
 hello world
 == Section 1
 hello world
 === Section 2
 hello world

would be folded to: >

 = Title -----------------------------------
 == Section 1 ------------------------------

Otherwise to >

 = Title -----------------------------------


*g:asciidoc_syntax_indented*       Enable highlight for indented blocks.
                                    Default: 1
  Example: >

  let g:asciidoc_syntax_indented = 0


*g:asciidoc_syntax_conceal*        Enable concealable syntax.
                                    Currently only bold, italic, bolditaclic,
                                    code and links are concealed.
                                    Default: 0
  Example: >

  let g:asciidoc_syntax_conceal = 1

NOTE: It doesn't automatically set conceallevel.


*g:asciidoc_fold_options*          Fold options (usually under the title).
                                    Default: 0
  Example: >

  let g:asciidoc_fold_options = 1

if enabled asciidoc options would be foldable: >

    = Title
    :author: Maxim Kim
    :experimental:
    :toc: left
    :toclevels: 3
    :icons: font
    :autofit-option:
    :source-highlighter: rouge
    :rouge-style: github
    :source-linenums-option:
    :revdate: 2018-11-19
    :imagesdir: images

When folded: >

    = Title
    :author: Maxim Kim ------------------------


*g:asciidoc_fenced_languages*      Highlight syntax of source blocks
                                    Default: []
  Example: >

  let g:asciidoc_fenced_languages = ['python', 'c', 'javascript']

Then in your asciidoc document: >

  [source,python]
  ----
  def hello():
      print("hello world")
  ----

should be highlighted with python syntax.


*g:asciidoc_img_paste_command*     Command to save clipboard image to a
                                    file.
                                    Default: 'gm convert clipboard: %s%s'
                                    Where first %s is a path, second %s is an
                                    image file name.
  Example: >

  " for OSX
  let g:asciidoc_img_paste_command = 'pngpaste %s%s'

  " for linux
  let g:asciidoc_img_paste_command = 'xclip -selection clipboard -t image/png -o > %s%s'


*g:asciidoc_img_paste_pattern*     Pattern of the saved clipboard image file.
                                    Default: 'img_%s_%s.png'
                                    Where first %s is a document base name,
                                    second %s is an image number.
  Example: >

  let g:asciidoc_img_paste_pattern = '%s_img_%s.png'

So if you edit 'README.adoc` document and paste a clipboard image there it
would have name 'README_img_1.png'. Next one would have name
'README_img_2.png' etc.


*g:asciidoc_opener*                Shell command to open asciidoc files.
                                    Used in |:AsciidocOpenRAW|,
                                    |:AsciidocOpenPDF|,
                                    |:AsciidocOpenHTML| and
                                    |:AsciidocOpenDOCX| commands.
                                    Default Windows: ':!start'
                                    Default Linux:   ':!xdg-open'
                                    Default OSX:     ':!open'
  Example: >

  let g:asciidoc_opener = ':!firefox'




COMMANDS                                                *asciidoc-commands*

These commands are local to the asciidoc buffers.


                                                           *:Asciidoc2HTML*
:Asciidoc2HTML          Convert current file to HTML.
                           Uses |g:asciidoc_executable|.


                                                            *:Asciidoc2PDF*
:Asciidoc2PDF           Convert current file to PDF.
                           Uses |g:asciidoc_pdf_executable|.


                                                           *:Asciidoc2DOCX*
:Asciidoc2DOCX          Convert current file to DOCX.
                           Uses combination of |g:asciidoc_executable| to
                           generate docbook file and
                           |g:asciidoc_pandoc_executable| to generate
                           result DOCX file.


                                                         *:AsciidocOpenRAW*
:AsciidocOpenRAW        Open current file in Web browser. Chrome and
                           Firefox have extension to render barebone .adoc
                           files. Uses |g:asciidoc_opener|.


                                                        *:AsciidocOpenHTML*
:AsciidocOpenHTML       Open HTML file of the current file. It should exist
                           (created first with |:Asciidoc2HTML| command).
                           Uses |g:asciidoc_opener|.


                                                         *:AsciidocOpenPDF*
:AsciidocOpenPDF        Open PDF file of the current file. It should exist
                           (created first with |:Asciidoc2PDF| command).
                           Uses |g:asciidoc_opener|.


                                                        *:AsciidocOpenDOCX*
:AsciidocOpenDOCX       Open DOCX file of the current file. It should exist
                           (created first with |:Asciidoc2DOCX| command).
                           Uses |g:asciidoc_opener|.


                                                      *:AsciidocPasteImage*
:AsciidocPasteImage     "Paste" image from clipboard into buffer.
                           1. Image file name is generated according to
                           |g:asciidoc_img_paste_pattern|.
                           2. Clipboard image is saved in :imagesdir:
                           directory (asciidoc option defined in a
                           document) or in the directory of the buffer.
                           3. Image file name is inserted into the buffer.
                           4. External dependency should be set up, see
                           |g:asciidoc_img_paste_command|.



MAPPINGS                                                *asciidoc-mappings*

*<Plug>(AsciidocFold)*    Fold sections in a special way.

If
* no count is provided, toggle current fold;
* count is n, open folds up to foldlevel n.


*<Plug>(AsciidocPromoteSection)*    Promote section including subsections.

This >

  = Title
  [cursor]
  == Section 1
  === Section 2
  == Section 3

Would become >

  == Title
  [cursor]
  === Section 1
  ==== Section 2
  === Section 3

*<Plug>(AsciidocDemoteSection)*     Demote section including subsections.

This >

  == Title
  [cursor]
  === Section 1
  ==== Section 2
  === Section 3

Would become >

  = Title
  [cursor]
  == Section 1
  === Section 2
  == Section 3



DEFAULT MAPPINGS

There are no default mappings. You can setup yours with: >


    " Function to create buffer local mappings
    fun! AsciidocMappings()
        nnoremap <buffer> <leader>oo :AsciidocOpenRAW<CR>
        nnoremap <buffer> <leader>op :AsciidocOpenPDF<CR>
        nnoremap <buffer> <leader>oh :AsciidocOpenHTML<CR>
        nnoremap <buffer> <leader>ox :AsciidocOpenDOCX<CR>
        nnoremap <buffer> <leader>ch :Asciidoc2HTML<CR>
        nnoremap <buffer> <leader>cp :Asciidoc2PDF<CR>
        nnoremap <buffer> <leader>cx :Asciidoc2DOCX<CR>
        nmap <buffer> <space><tab> <Plug>(AsciidocFold)
    endfun

    " Call AsciidocMappings for all `*.adoc` and `*.asciidoc` files
    augroup asciidoc
        au!
        au BufEnter *.adoc,*.asciidoc call AsciidocMappings()
    augroup END


BIBLIOGRAPHY COMPLETION                               *asciidoc-completion*

There is initial support for bibtex citation added.

Usage:

Place your bibtex files next to your asciidoc file (to the same path). Then
completion would be available for: >

  cite:[cit<C-X><C-U>
  citenp:[cit<C-X><C-U>


 vim:tw=78:et:ft=help:norl:
